{"version":3,"sources":["components/Artist.js","App.js","serviceWorker.js","index.js"],"names":["Artist","props","react_default","a","createElement","onSubmit","getArtist","type","placeholder","name","App","state","discography","e","preventDefault","artist","target","elements","value","axios","get","concat","then","res","data","album","map","className","src","strAlbumThumb","strAlbum","_this","setState","components_Artist","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2RAiBeA,EAfA,SAAEC,GACb,OACIC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,8BAEAF,EAAAC,EAAAC,cAAA,QAAMC,SAAUJ,EAAMK,WACpBJ,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OAAOC,YAAY,oBAAoBC,KAAK,WACxDP,EAAAC,EAAAC,cAAA,2BCoCKM,6MAjCbC,MAAQ,CACNC,YAAe,QAGjBN,UAAY,SAACO,GACXA,EAAEC,iBACF,IAAMC,EAASF,EAAEG,OAAOC,SAASF,OAAOG,MACpCH,GACFI,IAAMC,IAAN,0DAAAC,OAAoEN,IACnEO,KAAK,SAACC,GACL,IAAMX,EAAcW,EAAIC,KAAKC,MAAMC,IAAI,SAAAD,GACrC,OAAOvB,EAAAC,EAAAC,cAAA,MAAIuB,UAAU,cAAazB,EAAAC,EAAAC,cAAA,OAAKuB,UAAU,cAAcC,IAAKH,EAAMI,gBAAqB3B,EAAAC,EAAAC,cAAA,SAAIqB,EAAMK,aAE3GC,EAAKC,SAAS,CAAEpB,2FAOpB,OACAV,EAAAC,EAAAC,cAAA,OAAKuB,UAAU,OAEdzB,EAAAC,EAAAC,cAAC6B,EAAD,CAAQ3B,UAAW4B,KAAK5B,YAEtB4B,KAAKvB,MAAMC,YAAcV,EAAAC,EAAAC,cAAA,MAAIuB,UAAU,QAAQO,KAAKvB,MAAMC,aAC5DV,EAAAC,EAAAC,cAAA,0CA5Ba+B,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.d7cb7d7f.chunk.js","sourcesContent":["import React from 'react';\n\nconst Artist = ( props ) => {\n    return (\n        <div>\n        <h1>Audio API Caller</h1>\n   \n        <form onSubmit={props.getArtist} >\n          <input type=\"text\" placeholder=\"Example: Coldplay\" name='artist' ></input>\n          <button>Search</button>\n        </form>\n   \n       </div>\n    )\n\n}\n\nexport default Artist;","import React, { Component } from 'react';\nimport './App.css';\nimport axios from \"axios\";\n\n//http://www.theaudiodb.com/api/v1/json/1/search.php?s=coldplay\n\n//res.data.artists.strArtist\n\nimport Artist from './components/Artist'\n\nclass App extends Component {\n\n  state = {\n    'discography': null\n  }\n\n  getArtist = (e) => {\n    e.preventDefault()\n    const artist = e.target.elements.artist.value;\n    if (artist) {\n      axios.get(`https://theaudiodb.com/api/v1/json/1/searchalbum.php?s=${artist}`)\n      .then((res) =>  {\n        const discography = res.data.album.map(album => {\n          return <li className=\"albumNames\"><img className=\"albumCovers\" src={album.strAlbumThumb}></img><p>{album.strAlbum}</p></li>\n        })\n        this.setState({ discography })\n      })\n    } else return\n\n  }\n\n  render () { \n    return (\n    <div className=\"App\">\n\n     <Artist getArtist={this.getArtist}/>\n\n     { this.state.discography ? <ol className=\"list\">{this.state.discography}</ol> :\n     <p>Search for an Artist!</p> }\n \n    </div>\n  );\n}}\n \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}